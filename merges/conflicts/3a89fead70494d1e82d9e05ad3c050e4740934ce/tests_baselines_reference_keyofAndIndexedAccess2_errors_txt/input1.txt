tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(4,5): error TS2322: Type '"x"' is not assignable to type 'number'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(6,5): error TS2322: Type '2' is not assignable to type '0 | 1'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(7,5): error TS2322: Type '"x"' is not assignable to type '0 | 1'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(8,5): error TS2322: Type '1' is not assignable to type 'never'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(9,5): error TS2322: Type '2' is not assignable to type 'never'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(10,5): error TS2322: Type '"x"' is not assignable to type 'never'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(14,5): error TS2739: Type '{ [key: string]: number; }' is missing the following properties from type '{ x: number; y: number; }': x, y
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(15,5): error TS2322: Type 'T' is not assignable to type '{ x: number; y: number; }'.
  Type '{ [key: string]: number; }' is missing the following properties from type '{ x: number; y: number; }': x, y
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(18,5): error TS2322: Type '{ x: number; y: number; }' is not assignable to type 'T'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(19,5): error TS2322: Type '{ [key: string]: number; }' is not assignable to type 'T'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(26,7): error TS2339: Property 'x' does not exist on type 'T'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(27,5): error TS2322: Type '1' is not assignable to type 'T[keyof T]'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(31,5): error TS2322: Type '{ [key: string]: number; }' is not assignable to type '{ [P in K]: number; }'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(38,5): error TS2322: Type '{ [x: string]: number; }' is not assignable to type '{ [P in K]: number; }'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(50,3): error TS7017: Element implicitly has an 'any' type because type 'Item' has no index signature.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(51,3): error TS2322: Type '123' is not assignable to type 'string & number'.
  Type '123' is not assignable to type 'string'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(52,3): error TS2322: Type '123' is not assignable to type 'T[keyof T]'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(53,3): error TS2322: Type '123' is not assignable to type 'T[K]'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(65,7): error TS2339: Property 'foo' does not exist on type 'T'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(66,3): error TS2536: Type 'string' cannot be used to index type 'T'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(67,3): error TS2322: Type '123' is not assignable to type 'T[keyof T]'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(68,3): error TS2322: Type '123' is not assignable to type 'T[K]'.
tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts(108,5): error TS2322: Type '123' is not assignable to type 'Type[K]'.
  Type '123' is not assignable to type '123 & "some string"'.
    Type '123' is not assignable to type '"some string"'.


==== tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts (23 errors) ====
    function f1(obj: { a: number, b: 0 | 1, c: string }, k0: 'a', k1: 'a' | 'b', k2: 'a' | 'b' | 'c') {
        obj[k0] = 1;
        obj[k0] = 2;
        obj[k0] = 'x';  // Error
        ~~~~~~~
!!! error TS2322: Type '"x"' is not assignable to type 'number'.
        obj[k1] = 1;
        obj[k1] = 2;    // Error
        ~~~~~~~
!!! error TS2322: Type '2' is not assignable to type '0 | 1'.
        obj[k1] = 'x';  // Error
        ~~~~~~~
!!! error TS2322: Type '"x"' is not assignable to type '0 | 1'.
        obj[k2] = 1;    // Error
        ~~~~~~~
!!! error TS2322: Type '1' is not assignable to type 'never'.
        obj[k2] = 2;    // Error
        ~~~~~~~
!!! error TS2322: Type '2' is not assignable to type 'never'.
        obj[k2] = 'x';  // Error
        ~~~~~~~
!!! error TS2322: Type '"x"' is not assignable to type 'never'.
    }
    
    function f2<T extends { [key: string]: number }>(a: { x: number, y: number }, b: { [key: string]: number }, c: T, k: keyof T) {
        a = b;  // Error, index signature in source doesn't imply properties are present
        ~
!!! error TS2739: Type '{ [key: string]: number; }' is missing the following properties from type '{ x: number; y: number; }': x, y
        a = c;  // Error, index signature in source doesn't imply properties are present
        ~
!!! error TS2322: Type 'T' is not assignable to type '{ x: number; y: number; }'.
!!! error TS2322:   Type '{ [key: string]: number; }' is missing the following properties from type '{ x: number; y: number; }': x, y
        b = a;
        b = c;
        c = a;  // Error, constraint on target doesn't imply any properties or signatures
        ~
!!! error TS2322: Type '{ x: number; y: number; }' is not assignable to type 'T'.
        c = b;  // Error, constraint on target doesn't imply any properties or signatures
        ~
!!! error TS2322: Type '{ [key: string]: number; }' is not assignable to type 'T'.
        a.x;
        b.x;
        c.x;
        c[k];
        a.x = 1;
        b.x = 1;
        c.x = 1;  // Error, cannot write to index signature through constraint
          ~
!!! error TS2339: Property 'x' does not exist on type 'T'.
        c[k] = 1; // Error, cannot write to index signature through constraint
        ~~~~
!!! error TS2322: Type '1' is not assignable to type 'T[keyof T]'.
    }
    
    function f3<K extends string>(a: { [P in K]: number }, b: { [key: string]: number }, k: K) {
        a = b;  // Error, index signature doesn't imply properties are present
        ~
!!! error TS2322: Type '{ [key: string]: number; }' is not assignable to type '{ [P in K]: number; }'.
        b = a;
        a[k];
        a[k] = 1;
    }
    
    function f3b<K extends string>(a: { [P in K]: number }, b: { [P in string]: number }, k: K) {
        a = b;  // Error, index signature doesn't imply properties are present
        ~
!!! error TS2322: Type '{ [x: string]: number; }' is not assignable to type '{ [P in K]: number; }'.
        b = a;
    }
    
    function f4<K extends string>(a: { [key: string]: number }[K], b: number) {
      a = b;
      b = a;
    }
    
    type Item = { a: string, b: number };
    
    function f10<T extends Item, K extends keyof T>(obj: T, k1: string, k2: keyof Item, k3: keyof T, k4: K) {
      obj[k1] = 123;  // Error
      ~~~~~~~
!!! error TS7017: Element implicitly has an 'any' type because type 'Item' has no index signature.
      obj[k2] = 123;  // Error
      ~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'string & number'.
!!! error TS2322:   Type '123' is not assignable to type 'string'.
      obj[k3] = 123;  // Error
      ~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'T[keyof T]'.
      obj[k4] = 123;  // Error
      ~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'T[K]'.
    }
    
    type Dict = Record<string, number>;
    
    function f11<K extends keyof Dict>(obj: Dict, k1: keyof Dict, k2: K) {
      obj.foo = 123;
      obj[k1] = 123;
      obj[k2] = 123;
    }
    
    function f12<T extends Readonly<Dict>, K extends keyof T>(obj: T, k1: keyof Dict, k2: keyof T, k3: K) {
      obj.foo = 123;  // Error
          ~~~
!!! error TS2339: Property 'foo' does not exist on type 'T'.
      obj[k1] = 123;  // Error
      ~~~~~~~
!!! error TS2536: Type 'string' cannot be used to index type 'T'.
      obj[k2] = 123;  // Error
      ~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'T[keyof T]'.
      obj[k3] = 123;  // Error
      ~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'T[K]'.
    }
    
    // Repro from #27895
    
    export interface Entity {
        id: number | string;
    }
    
    export type IdOf<E extends Entity> = E['id'];
    
    export interface EntityState<E extends Entity> {
        ids: IdOf<E>[];
        entities: { [key: string]: E, [key: number]: E };
    }
    
    
    export function getAllEntities<E extends Entity>(state: EntityState<E>): E[] {
        const { ids, entities } = state;
        return ids.map(id => entities[id]);
    }
    
    export function getEntity<E extends Entity>(id: IdOf<E>, state: EntityState<E>): E | undefined {
        const { ids, entities } = state;
    
        if (!ids.includes(id)) {
            return undefined;
        }
    
        return entities[id];
    }
    
    // Repro from #30603
    
    interface Type {
        a: 123;
        b: "some string";
    }
    
    function get123<K extends keyof Type>(): Type[K] {
        return 123;  // Error
        ~~~~~~~~~~~
!!! error TS2322: Type '123' is not assignable to type 'Type[K]'.
!!! error TS2322:   Type '123' is not assignable to type '123 & "some string"'.
!!! error TS2322:     Type '123' is not assignable to type '"some string"'.
    }
    
    // Repros from #30938
    
    function fn<T extends {elements: Array<string>} | {elements: Array<number>}>(param: T, cb: (element: T['elements'][number]) => void) {
        cb(param.elements[0]);
    }
    
    function fn2<T extends Array<string>>(param: T, cb: (element: T[number]) => void) {
        cb(param[0]);
    }
    