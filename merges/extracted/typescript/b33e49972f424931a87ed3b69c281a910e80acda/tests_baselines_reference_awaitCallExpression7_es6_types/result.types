=== tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression7_es6.ts ===
declare var a: boolean;
>a : boolean

declare var p: Promise<boolean>;
>p : Promise<boolean>
>Promise : Promise<T>

declare function fn(arg0: boolean, arg1: boolean, arg2: boolean): void;
>fn : (arg0: boolean, arg1: boolean, arg2: boolean) => void
>arg0 : boolean
>arg1 : boolean
>arg2 : boolean

declare var o: { fn(arg0: boolean, arg1: boolean, arg2: boolean): void; };
>o : { fn(arg0: boolean, arg1: boolean, arg2: boolean): void; }
>fn : (arg0: boolean, arg1: boolean, arg2: boolean) => void
>arg0 : boolean
>arg1 : boolean
>arg2 : boolean

declare var pfn: Promise<{ (arg0: boolean, arg1: boolean, arg2: boolean): void; }>;
>pfn : Promise<(arg0: boolean, arg1: boolean, arg2: boolean) => void>
>Promise : Promise<T>
>arg0 : boolean
>arg1 : boolean
>arg2 : boolean

declare var po: Promise<{ fn(arg0: boolean, arg1: boolean, arg2: boolean): void; }>;
>po : Promise<{ fn(arg0: boolean, arg1: boolean, arg2: boolean): void; }>
>Promise : Promise<T>
>fn : (arg0: boolean, arg1: boolean, arg2: boolean) => void
>arg0 : boolean
>arg1 : boolean
>arg2 : boolean

declare function before(): void;
>before : () => void

declare function after(): void;
>after : () => void

async function func(): Promise<void> {
>func : () => Promise<void>
>Promise : Promise<T>

<<<<<<< HEAD
    "before";
>"before" : "before"
=======
    before();
>before() : void
>before : () => void
>>>>>>> 46856462816b54e32a9d962e218d6e3f8ff42348

    var b = o.fn(a, await p, a);
>b : void
>o.fn(a, await p, a) : void
>o.fn : (arg0: boolean, arg1: boolean, arg2: boolean) => void
>o : { fn(arg0: boolean, arg1: boolean, arg2: boolean): void; }
>fn : (arg0: boolean, arg1: boolean, arg2: boolean) => void
>a : boolean
>await p : boolean
>p : Promise<boolean>
>a : boolean

<<<<<<< HEAD
    "after";
>"after" : "after"
=======
    after();
>after() : void
>after : () => void
>>>>>>> 46856462816b54e32a9d962e218d6e3f8ff42348
}
