=== tests/cases/compiler/declarationEmitPromise.ts ===

export class bluebird<T> {
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 1, 22))

    static all: Array<bluebird<any>>;
>all : Symbol(bluebird.all, Decl(declarationEmitPromise.ts, 1, 26))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
}

export async function runSampleWorks<A, B, C, D, E>(
>runSampleWorks : Symbol(runSampleWorks, Decl(declarationEmitPromise.ts, 3, 1))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 5, 37))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 5, 39))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 5, 42))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 5, 45))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 5, 48))

    a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) {
>a : Symbol(a, Decl(declarationEmitPromise.ts, 5, 52))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 5, 37))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 6, 19))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 5, 39))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 6, 36))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 5, 42))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 6, 53))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 5, 45))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 6, 70))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 5, 48))

    let result = await (bluebird.all as any)([a, b, c, d, e].filter(el => !!el));
>result : Symbol(result, Decl(declarationEmitPromise.ts, 7, 7))
>bluebird.all : Symbol(bluebird.all, Decl(declarationEmitPromise.ts, 1, 26))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>all : Symbol(bluebird.all, Decl(declarationEmitPromise.ts, 1, 26))
>[a, b, c, d, e].filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(declarationEmitPromise.ts, 5, 52))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 6, 19))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 6, 36))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 6, 53))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 6, 70))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --))
>el : Symbol(el, Decl(declarationEmitPromise.ts, 7, 68))
>el : Symbol(el, Decl(declarationEmitPromise.ts, 7, 68))

    let func = <T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T): T =>
>func : Symbol(func, Decl(declarationEmitPromise.ts, 8, 7))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 8, 16))
>f : Symbol(f, Decl(declarationEmitPromise.ts, 8, 19))
>a : Symbol(a, Decl(declarationEmitPromise.ts, 8, 23))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 5, 37))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 8, 28))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 5, 39))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 8, 35))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 5, 42))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 8, 42))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 5, 45))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 8, 49))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 5, 48))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 8, 16))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 8, 16))

        f.apply(this, result);
>f.apply : Symbol(Function.apply, Decl(lib.es5.d.ts, --, --))
>f : Symbol(f, Decl(declarationEmitPromise.ts, 8, 19))
>apply : Symbol(Function.apply, Decl(lib.es5.d.ts, --, --))
>result : Symbol(result, Decl(declarationEmitPromise.ts, 7, 7))

    let rfunc: typeof func & {} = func as any; // <- This is the only difference
>rfunc : Symbol(rfunc, Decl(declarationEmitPromise.ts, 10, 7))
>func : Symbol(func, Decl(declarationEmitPromise.ts, 8, 7))
>func : Symbol(func, Decl(declarationEmitPromise.ts, 8, 7))

    return rfunc
>rfunc : Symbol(rfunc, Decl(declarationEmitPromise.ts, 10, 7))
}

export async function runSampleBreaks<A, B, C, D, E>(
>runSampleBreaks : Symbol(runSampleBreaks, Decl(declarationEmitPromise.ts, 12, 1))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 14, 38))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 14, 40))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 14, 43))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 14, 46))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 14, 49))

    a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) {
>a : Symbol(a, Decl(declarationEmitPromise.ts, 14, 53))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 14, 38))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 15, 19))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 14, 40))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 15, 36))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 14, 43))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 15, 53))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 14, 46))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 15, 70))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 14, 49))

    let result = await (bluebird.all as any)([a, b, c, d, e].filter(el => !!el));
>result : Symbol(result, Decl(declarationEmitPromise.ts, 16, 7))
>bluebird.all : Symbol(bluebird.all, Decl(declarationEmitPromise.ts, 1, 26))
>bluebird : Symbol(bluebird, Decl(declarationEmitPromise.ts, 0, 0))
>all : Symbol(bluebird.all, Decl(declarationEmitPromise.ts, 1, 26))
>[a, b, c, d, e].filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(declarationEmitPromise.ts, 14, 53))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 15, 19))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 15, 36))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 15, 53))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 15, 70))
>filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --))
>el : Symbol(el, Decl(declarationEmitPromise.ts, 16, 68))
>el : Symbol(el, Decl(declarationEmitPromise.ts, 16, 68))

    let func = <T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T): T =>
>func : Symbol(func, Decl(declarationEmitPromise.ts, 17, 7))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 17, 16))
>f : Symbol(f, Decl(declarationEmitPromise.ts, 17, 19))
>a : Symbol(a, Decl(declarationEmitPromise.ts, 17, 23))
>A : Symbol(A, Decl(declarationEmitPromise.ts, 14, 38))
>b : Symbol(b, Decl(declarationEmitPromise.ts, 17, 28))
>B : Symbol(B, Decl(declarationEmitPromise.ts, 14, 40))
>c : Symbol(c, Decl(declarationEmitPromise.ts, 17, 35))
>C : Symbol(C, Decl(declarationEmitPromise.ts, 14, 43))
>d : Symbol(d, Decl(declarationEmitPromise.ts, 17, 42))
>D : Symbol(D, Decl(declarationEmitPromise.ts, 14, 46))
>e : Symbol(e, Decl(declarationEmitPromise.ts, 17, 49))
>E : Symbol(E, Decl(declarationEmitPromise.ts, 14, 49))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 17, 16))
>T : Symbol(T, Decl(declarationEmitPromise.ts, 17, 16))

        f.apply(this, result);
>f.apply : Symbol(Function.apply, Decl(lib.es5.d.ts, --, --))
>f : Symbol(f, Decl(declarationEmitPromise.ts, 17, 19))
>apply : Symbol(Function.apply, Decl(lib.es5.d.ts, --, --))
>result : Symbol(result, Decl(declarationEmitPromise.ts, 16, 7))

    let rfunc: typeof func = func as any; // <- This is the only difference
>rfunc : Symbol(rfunc, Decl(declarationEmitPromise.ts, 19, 7))
>func : Symbol(func, Decl(declarationEmitPromise.ts, 17, 7))
>func : Symbol(func, Decl(declarationEmitPromise.ts, 17, 7))

    return rfunc
>rfunc : Symbol(rfunc, Decl(declarationEmitPromise.ts, 19, 7))
}
