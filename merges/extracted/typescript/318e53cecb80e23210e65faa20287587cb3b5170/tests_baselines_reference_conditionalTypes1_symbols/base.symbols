=== tests/cases/conformance/types/conditional/conditionalTypes1.ts ===
type T00 = Exclude<"a" | "b" | "c" | "d", "a" | "c" | "f">;  // "b" | "d"
>T00 : Symbol(T00, Decl(conditionalTypes1.ts, 0, 0))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))

type T01 = Extract<"a" | "b" | "c" | "d", "a" | "c" | "f">;  // "a" | "c"
>T01 : Symbol(T01, Decl(conditionalTypes1.ts, 0, 59))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))

type T02 = Exclude<string | number | (() => void), Function>;  // string | number
>T02 : Symbol(T02, Decl(conditionalTypes1.ts, 1, 59))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

type T03 = Extract<string | number | (() => void), Function>;  // () => void
>T03 : Symbol(T03, Decl(conditionalTypes1.ts, 3, 61))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

type T04 = NonNullable<string | number | undefined>;  // string | number
>T04 : Symbol(T04, Decl(conditionalTypes1.ts, 4, 61))
>NonNullable : Symbol(NonNullable, Decl(lib.d.ts, --, --))

type T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]
>T05 : Symbol(T05, Decl(conditionalTypes1.ts, 6, 52))
>NonNullable : Symbol(NonNullable, Decl(lib.d.ts, --, --))

function f1<T>(x: T, y: NonNullable<T>) {
>f1 : Symbol(f1, Decl(conditionalTypes1.ts, 7, 69))
>T : Symbol(T, Decl(conditionalTypes1.ts, 9, 12))
>x : Symbol(x, Decl(conditionalTypes1.ts, 9, 15))
>T : Symbol(T, Decl(conditionalTypes1.ts, 9, 12))
>y : Symbol(y, Decl(conditionalTypes1.ts, 9, 20))
>NonNullable : Symbol(NonNullable, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 9, 12))

    x = y;
>x : Symbol(x, Decl(conditionalTypes1.ts, 9, 15))
>y : Symbol(y, Decl(conditionalTypes1.ts, 9, 20))

    y = x;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 9, 20))
>x : Symbol(x, Decl(conditionalTypes1.ts, 9, 15))
}

function f2<T extends string | undefined>(x: T, y: NonNullable<T>) {
>f2 : Symbol(f2, Decl(conditionalTypes1.ts, 12, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 14, 12))
>x : Symbol(x, Decl(conditionalTypes1.ts, 14, 42))
>T : Symbol(T, Decl(conditionalTypes1.ts, 14, 12))
>y : Symbol(y, Decl(conditionalTypes1.ts, 14, 47))
>NonNullable : Symbol(NonNullable, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 14, 12))

    x = y;
>x : Symbol(x, Decl(conditionalTypes1.ts, 14, 42))
>y : Symbol(y, Decl(conditionalTypes1.ts, 14, 47))

    y = x;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 14, 47))
>x : Symbol(x, Decl(conditionalTypes1.ts, 14, 42))

    let s1: string = x;  // Error
>s1 : Symbol(s1, Decl(conditionalTypes1.ts, 17, 7))
>x : Symbol(x, Decl(conditionalTypes1.ts, 14, 42))

    let s2: string = y;
>s2 : Symbol(s2, Decl(conditionalTypes1.ts, 18, 7))
>y : Symbol(y, Decl(conditionalTypes1.ts, 14, 47))
}

function f3<T>(x: Partial<T>[keyof T], y: NonNullable<Partial<T>[keyof T]>) {
>f3 : Symbol(f3, Decl(conditionalTypes1.ts, 19, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 21, 12))
>x : Symbol(x, Decl(conditionalTypes1.ts, 21, 15))
>Partial : Symbol(Partial, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 21, 12))
>T : Symbol(T, Decl(conditionalTypes1.ts, 21, 12))
>y : Symbol(y, Decl(conditionalTypes1.ts, 21, 38))
>NonNullable : Symbol(NonNullable, Decl(lib.d.ts, --, --))
>Partial : Symbol(Partial, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 21, 12))
>T : Symbol(T, Decl(conditionalTypes1.ts, 21, 12))

    x = y;
>x : Symbol(x, Decl(conditionalTypes1.ts, 21, 15))
>y : Symbol(y, Decl(conditionalTypes1.ts, 21, 38))

    y = x;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 21, 38))
>x : Symbol(x, Decl(conditionalTypes1.ts, 21, 15))
}

type Options = { k: "a", a: number } | { k: "b", b: string } | { k: "c", c: boolean };
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 26, 16))
>a : Symbol(a, Decl(conditionalTypes1.ts, 26, 24))
>k : Symbol(k, Decl(conditionalTypes1.ts, 26, 40))
>b : Symbol(b, Decl(conditionalTypes1.ts, 26, 48))
>k : Symbol(k, Decl(conditionalTypes1.ts, 26, 64))
>c : Symbol(c, Decl(conditionalTypes1.ts, 26, 72))

type T10 = Exclude<Options, { k: "a" | "b" }>;  // { k: "c", c: boolean }
>T10 : Symbol(T10, Decl(conditionalTypes1.ts, 26, 86))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 28, 29))

type T11 = Extract<Options, { k: "a" | "b" }>;  // { k: "a", a: number } | { k: "b", b: string }
>T11 : Symbol(T11, Decl(conditionalTypes1.ts, 28, 46))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 29, 29))

type T12 = Exclude<Options, { k: "a" } | { k: "b" }>;  // { k: "c", c: boolean }
>T12 : Symbol(T12, Decl(conditionalTypes1.ts, 29, 46))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 31, 29))
>k : Symbol(k, Decl(conditionalTypes1.ts, 31, 42))

type T13 = Extract<Options, { k: "a" } | { k: "b" }>;  // { k: "a", a: number } | { k: "b", b: string }
>T13 : Symbol(T13, Decl(conditionalTypes1.ts, 31, 53))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 32, 29))
>k : Symbol(k, Decl(conditionalTypes1.ts, 32, 42))

type T14 = Exclude<Options, { q: "a" }>;  // Options
>T14 : Symbol(T14, Decl(conditionalTypes1.ts, 32, 53))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>q : Symbol(q, Decl(conditionalTypes1.ts, 34, 29))

type T15 = Extract<Options, { q: "a" }>;  // never
>T15 : Symbol(T15, Decl(conditionalTypes1.ts, 34, 40))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>q : Symbol(q, Decl(conditionalTypes1.ts, 35, 29))

declare function f4<T extends Options, K extends string>(p: K): Extract<T, { k: K }>;
>f4 : Symbol(f4, Decl(conditionalTypes1.ts, 35, 40))
>T : Symbol(T, Decl(conditionalTypes1.ts, 37, 20))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>K : Symbol(K, Decl(conditionalTypes1.ts, 37, 38))
>p : Symbol(p, Decl(conditionalTypes1.ts, 37, 57))
>K : Symbol(K, Decl(conditionalTypes1.ts, 37, 38))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 37, 20))
>k : Symbol(k, Decl(conditionalTypes1.ts, 37, 76))
>K : Symbol(K, Decl(conditionalTypes1.ts, 37, 38))

let x0 = f4("a");  // { k: "a", a: number }
>x0 : Symbol(x0, Decl(conditionalTypes1.ts, 38, 3))
>f4 : Symbol(f4, Decl(conditionalTypes1.ts, 35, 40))

type OptionsOfKind<K extends Options["k"]> = Extract<Options, { k: K }>;
>OptionsOfKind : Symbol(OptionsOfKind, Decl(conditionalTypes1.ts, 38, 17))
>K : Symbol(K, Decl(conditionalTypes1.ts, 40, 19))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))
>k : Symbol(k, Decl(conditionalTypes1.ts, 40, 63))
>K : Symbol(K, Decl(conditionalTypes1.ts, 40, 19))

type T16 = OptionsOfKind<"a" | "b">;  // { k: "a", a: number } | { k: "b", b: string }
>T16 : Symbol(T16, Decl(conditionalTypes1.ts, 40, 72))
>OptionsOfKind : Symbol(OptionsOfKind, Decl(conditionalTypes1.ts, 38, 17))

type Select<T, K extends keyof T, V extends T[K]> = Extract<T, { [P in K]: V }>;
>Select : Symbol(Select, Decl(conditionalTypes1.ts, 42, 36))
>T : Symbol(T, Decl(conditionalTypes1.ts, 44, 12))
>K : Symbol(K, Decl(conditionalTypes1.ts, 44, 14))
>T : Symbol(T, Decl(conditionalTypes1.ts, 44, 12))
>V : Symbol(V, Decl(conditionalTypes1.ts, 44, 33))
>T : Symbol(T, Decl(conditionalTypes1.ts, 44, 12))
>K : Symbol(K, Decl(conditionalTypes1.ts, 44, 14))
>Extract : Symbol(Extract, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 44, 12))
>P : Symbol(P, Decl(conditionalTypes1.ts, 44, 66))
>K : Symbol(K, Decl(conditionalTypes1.ts, 44, 14))
>V : Symbol(V, Decl(conditionalTypes1.ts, 44, 33))

type T17 = Select<Options, "k", "a" | "b">;  // // { k: "a", a: number } | { k: "b", b: string }
>T17 : Symbol(T17, Decl(conditionalTypes1.ts, 44, 80))
>Select : Symbol(Select, Decl(conditionalTypes1.ts, 42, 36))
>Options : Symbol(Options, Decl(conditionalTypes1.ts, 24, 1))

type TypeName<T> =
>TypeName : Symbol(TypeName, Decl(conditionalTypes1.ts, 46, 43))
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))

    T extends string ? "string" :
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))

    T extends number ? "number" :
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))

    T extends boolean ? "boolean" :
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))

    T extends undefined ? "undefined" :
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))

    T extends Function ? "function" :
>T : Symbol(T, Decl(conditionalTypes1.ts, 48, 14))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

    "object";

type T20 = TypeName<string | (() => void)>;  // "string" | "function"
>T20 : Symbol(T20, Decl(conditionalTypes1.ts, 54, 13))
>TypeName : Symbol(TypeName, Decl(conditionalTypes1.ts, 46, 43))

type T21 = TypeName<any>;  // "string" | "number" | "boolean" | "undefined" | "function" | "object"
>T21 : Symbol(T21, Decl(conditionalTypes1.ts, 56, 43))
>TypeName : Symbol(TypeName, Decl(conditionalTypes1.ts, 46, 43))

type T22 = TypeName<never>;  // "string" | "number" | "boolean" | "undefined" | "function" | "object"
>T22 : Symbol(T22, Decl(conditionalTypes1.ts, 57, 25))
>TypeName : Symbol(TypeName, Decl(conditionalTypes1.ts, 46, 43))

type T23 = TypeName<{}>;  // "object"
>T23 : Symbol(T23, Decl(conditionalTypes1.ts, 58, 27))
>TypeName : Symbol(TypeName, Decl(conditionalTypes1.ts, 46, 43))

type KnockoutObservable<T> = { object: T };
>KnockoutObservable : Symbol(KnockoutObservable, Decl(conditionalTypes1.ts, 59, 24))
>T : Symbol(T, Decl(conditionalTypes1.ts, 61, 24))
>object : Symbol(object, Decl(conditionalTypes1.ts, 61, 30))
>T : Symbol(T, Decl(conditionalTypes1.ts, 61, 24))

type KnockoutObservableArray<T> = { array: T };
>KnockoutObservableArray : Symbol(KnockoutObservableArray, Decl(conditionalTypes1.ts, 61, 43))
>T : Symbol(T, Decl(conditionalTypes1.ts, 62, 29))
>array : Symbol(array, Decl(conditionalTypes1.ts, 62, 35))
>T : Symbol(T, Decl(conditionalTypes1.ts, 62, 29))

type KnockedOut<T> = T extends any[] ? KnockoutObservableArray<T[number]> : KnockoutObservable<T>;
>KnockedOut : Symbol(KnockedOut, Decl(conditionalTypes1.ts, 62, 47))
>T : Symbol(T, Decl(conditionalTypes1.ts, 64, 16))
>T : Symbol(T, Decl(conditionalTypes1.ts, 64, 16))
>KnockoutObservableArray : Symbol(KnockoutObservableArray, Decl(conditionalTypes1.ts, 61, 43))
>T : Symbol(T, Decl(conditionalTypes1.ts, 64, 16))
>KnockoutObservable : Symbol(KnockoutObservable, Decl(conditionalTypes1.ts, 59, 24))
>T : Symbol(T, Decl(conditionalTypes1.ts, 64, 16))

type KnockedOutObj<T> = {
>KnockedOutObj : Symbol(KnockedOutObj, Decl(conditionalTypes1.ts, 64, 98))
>T : Symbol(T, Decl(conditionalTypes1.ts, 66, 19))

    [P in keyof T]: KnockedOut<T[P]>;
>P : Symbol(P, Decl(conditionalTypes1.ts, 67, 5))
>T : Symbol(T, Decl(conditionalTypes1.ts, 66, 19))
>KnockedOut : Symbol(KnockedOut, Decl(conditionalTypes1.ts, 62, 47))
>T : Symbol(T, Decl(conditionalTypes1.ts, 66, 19))
>P : Symbol(P, Decl(conditionalTypes1.ts, 67, 5))
}

interface Item {
>Item : Symbol(Item, Decl(conditionalTypes1.ts, 68, 1))

    id: number;
>id : Symbol(Item.id, Decl(conditionalTypes1.ts, 70, 16))

    name: string;
>name : Symbol(Item.name, Decl(conditionalTypes1.ts, 71, 15))

    subitems: string[];
>subitems : Symbol(Item.subitems, Decl(conditionalTypes1.ts, 72, 17))
}

type KOItem = KnockedOutObj<Item>;
>KOItem : Symbol(KOItem, Decl(conditionalTypes1.ts, 74, 1))
>KnockedOutObj : Symbol(KnockedOutObj, Decl(conditionalTypes1.ts, 64, 98))
>Item : Symbol(Item, Decl(conditionalTypes1.ts, 68, 1))

interface Part {
>Part : Symbol(Part, Decl(conditionalTypes1.ts, 76, 34))

    id: number;
>id : Symbol(Part.id, Decl(conditionalTypes1.ts, 78, 16))

    name: string;
>name : Symbol(Part.name, Decl(conditionalTypes1.ts, 79, 15))

    subparts: Part[];
>subparts : Symbol(Part.subparts, Decl(conditionalTypes1.ts, 80, 17))
>Part : Symbol(Part, Decl(conditionalTypes1.ts, 76, 34))

    updatePart(newName: string): void;
>updatePart : Symbol(Part.updatePart, Decl(conditionalTypes1.ts, 81, 21))
>newName : Symbol(newName, Decl(conditionalTypes1.ts, 82, 15))
}

type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];
>FunctionPropertyNames : Symbol(FunctionPropertyNames, Decl(conditionalTypes1.ts, 83, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 85, 27))
>K : Symbol(K, Decl(conditionalTypes1.ts, 85, 35))
>T : Symbol(T, Decl(conditionalTypes1.ts, 85, 27))
>T : Symbol(T, Decl(conditionalTypes1.ts, 85, 27))
>K : Symbol(K, Decl(conditionalTypes1.ts, 85, 35))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>K : Symbol(K, Decl(conditionalTypes1.ts, 85, 35))
>T : Symbol(T, Decl(conditionalTypes1.ts, 85, 27))

type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;
>FunctionProperties : Symbol(FunctionProperties, Decl(conditionalTypes1.ts, 85, 95))
>T : Symbol(T, Decl(conditionalTypes1.ts, 86, 24))
>Pick : Symbol(Pick, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 86, 24))
>FunctionPropertyNames : Symbol(FunctionPropertyNames, Decl(conditionalTypes1.ts, 83, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 86, 24))

type NonFunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T];
>NonFunctionPropertyNames : Symbol(NonFunctionPropertyNames, Decl(conditionalTypes1.ts, 86, 63))
>T : Symbol(T, Decl(conditionalTypes1.ts, 88, 30))
>K : Symbol(K, Decl(conditionalTypes1.ts, 88, 38))
>T : Symbol(T, Decl(conditionalTypes1.ts, 88, 30))
>T : Symbol(T, Decl(conditionalTypes1.ts, 88, 30))
>K : Symbol(K, Decl(conditionalTypes1.ts, 88, 38))
>Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>K : Symbol(K, Decl(conditionalTypes1.ts, 88, 38))
>T : Symbol(T, Decl(conditionalTypes1.ts, 88, 30))

type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;
>NonFunctionProperties : Symbol(NonFunctionProperties, Decl(conditionalTypes1.ts, 88, 98))
>T : Symbol(T, Decl(conditionalTypes1.ts, 89, 27))
>Pick : Symbol(Pick, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes1.ts, 89, 27))
>NonFunctionPropertyNames : Symbol(NonFunctionPropertyNames, Decl(conditionalTypes1.ts, 86, 63))
>T : Symbol(T, Decl(conditionalTypes1.ts, 89, 27))

type T30 = FunctionProperties<Part>;
>T30 : Symbol(T30, Decl(conditionalTypes1.ts, 89, 69))
>FunctionProperties : Symbol(FunctionProperties, Decl(conditionalTypes1.ts, 85, 95))
>Part : Symbol(Part, Decl(conditionalTypes1.ts, 76, 34))

type T31 = NonFunctionProperties<Part>;
>T31 : Symbol(T31, Decl(conditionalTypes1.ts, 91, 36))
>NonFunctionProperties : Symbol(NonFunctionProperties, Decl(conditionalTypes1.ts, 88, 98))
>Part : Symbol(Part, Decl(conditionalTypes1.ts, 76, 34))

function f7<T>(x: T, y: FunctionProperties<T>, z: NonFunctionProperties<T>) {
>f7 : Symbol(f7, Decl(conditionalTypes1.ts, 92, 39))
>T : Symbol(T, Decl(conditionalTypes1.ts, 94, 12))
>x : Symbol(x, Decl(conditionalTypes1.ts, 94, 15))
>T : Symbol(T, Decl(conditionalTypes1.ts, 94, 12))
>y : Symbol(y, Decl(conditionalTypes1.ts, 94, 20))
>FunctionProperties : Symbol(FunctionProperties, Decl(conditionalTypes1.ts, 85, 95))
>T : Symbol(T, Decl(conditionalTypes1.ts, 94, 12))
>z : Symbol(z, Decl(conditionalTypes1.ts, 94, 46))
>NonFunctionProperties : Symbol(NonFunctionProperties, Decl(conditionalTypes1.ts, 88, 98))
>T : Symbol(T, Decl(conditionalTypes1.ts, 94, 12))

    x = y;  // Error
>x : Symbol(x, Decl(conditionalTypes1.ts, 94, 15))
>y : Symbol(y, Decl(conditionalTypes1.ts, 94, 20))

    x = z;  // Error
>x : Symbol(x, Decl(conditionalTypes1.ts, 94, 15))
>z : Symbol(z, Decl(conditionalTypes1.ts, 94, 46))

    y = x;
>y : Symbol(y, Decl(conditionalTypes1.ts, 94, 20))
>x : Symbol(x, Decl(conditionalTypes1.ts, 94, 15))

    y = z;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 94, 20))
>z : Symbol(z, Decl(conditionalTypes1.ts, 94, 46))

    z = x;
>z : Symbol(z, Decl(conditionalTypes1.ts, 94, 46))
>x : Symbol(x, Decl(conditionalTypes1.ts, 94, 15))

    z = y;  // Error
>z : Symbol(z, Decl(conditionalTypes1.ts, 94, 46))
>y : Symbol(y, Decl(conditionalTypes1.ts, 94, 20))
}

function f8<T>(x: keyof T, y: FunctionPropertyNames<T>, z: NonFunctionPropertyNames<T>) {
>f8 : Symbol(f8, Decl(conditionalTypes1.ts, 101, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 103, 12))
>x : Symbol(x, Decl(conditionalTypes1.ts, 103, 15))
>T : Symbol(T, Decl(conditionalTypes1.ts, 103, 12))
>y : Symbol(y, Decl(conditionalTypes1.ts, 103, 26))
>FunctionPropertyNames : Symbol(FunctionPropertyNames, Decl(conditionalTypes1.ts, 83, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 103, 12))
>z : Symbol(z, Decl(conditionalTypes1.ts, 103, 55))
>NonFunctionPropertyNames : Symbol(NonFunctionPropertyNames, Decl(conditionalTypes1.ts, 86, 63))
>T : Symbol(T, Decl(conditionalTypes1.ts, 103, 12))

    x = y;
>x : Symbol(x, Decl(conditionalTypes1.ts, 103, 15))
>y : Symbol(y, Decl(conditionalTypes1.ts, 103, 26))

    x = z;
>x : Symbol(x, Decl(conditionalTypes1.ts, 103, 15))
>z : Symbol(z, Decl(conditionalTypes1.ts, 103, 55))

    y = x;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 103, 26))
>x : Symbol(x, Decl(conditionalTypes1.ts, 103, 15))

    y = z;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 103, 26))
>z : Symbol(z, Decl(conditionalTypes1.ts, 103, 55))

    z = x;  // Error
>z : Symbol(z, Decl(conditionalTypes1.ts, 103, 55))
>x : Symbol(x, Decl(conditionalTypes1.ts, 103, 15))

    z = y;  // Error
>z : Symbol(z, Decl(conditionalTypes1.ts, 103, 55))
>y : Symbol(y, Decl(conditionalTypes1.ts, 103, 26))
}

type DeepReadonly<T> =
>DeepReadonly : Symbol(DeepReadonly, Decl(conditionalTypes1.ts, 110, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))

    T extends any[] ? DeepReadonlyArray<T[number]> :
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))
>DeepReadonlyArray : Symbol(DeepReadonlyArray, Decl(conditionalTypes1.ts, 115, 6))
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))

    T extends object ? DeepReadonlyObject<T> :
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))
>DeepReadonlyObject : Symbol(DeepReadonlyObject, Decl(conditionalTypes1.ts, 117, 72))
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))

    T;
>T : Symbol(T, Decl(conditionalTypes1.ts, 112, 18))

interface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> {}
>DeepReadonlyArray : Symbol(DeepReadonlyArray, Decl(conditionalTypes1.ts, 115, 6))
>T : Symbol(T, Decl(conditionalTypes1.ts, 117, 28))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.d.ts, --, --))
>DeepReadonly : Symbol(DeepReadonly, Decl(conditionalTypes1.ts, 110, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 117, 28))

type DeepReadonlyObject<T> = {
>DeepReadonlyObject : Symbol(DeepReadonlyObject, Decl(conditionalTypes1.ts, 117, 72))
>T : Symbol(T, Decl(conditionalTypes1.ts, 119, 24))

    readonly [P in NonFunctionPropertyNames<T>]: DeepReadonly<T[P]>;
>P : Symbol(P, Decl(conditionalTypes1.ts, 120, 14))
>NonFunctionPropertyNames : Symbol(NonFunctionPropertyNames, Decl(conditionalTypes1.ts, 86, 63))
>T : Symbol(T, Decl(conditionalTypes1.ts, 119, 24))
>DeepReadonly : Symbol(DeepReadonly, Decl(conditionalTypes1.ts, 110, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 119, 24))
>P : Symbol(P, Decl(conditionalTypes1.ts, 120, 14))

};

function f10(part: DeepReadonly<Part>) {
>f10 : Symbol(f10, Decl(conditionalTypes1.ts, 121, 2))
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>DeepReadonly : Symbol(DeepReadonly, Decl(conditionalTypes1.ts, 110, 1))
>Part : Symbol(Part, Decl(conditionalTypes1.ts, 76, 34))

    let name: string = part.name;
>name : Symbol(name, Decl(conditionalTypes1.ts, 124, 7))
>part.name : Symbol(name)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>name : Symbol(name)

    let id: number = part.subparts[0].id;
>id : Symbol(id, Decl(conditionalTypes1.ts, 125, 7))
>part.subparts[0].id : Symbol(id)
>part.subparts : Symbol(subparts)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>subparts : Symbol(subparts)
>id : Symbol(id)

    part.id = part.id;  // Error
>part.id : Symbol(id)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>id : Symbol(id)
>part.id : Symbol(id)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>id : Symbol(id)

    part.subparts[0] = part.subparts[0];  // Error
>part.subparts : Symbol(subparts)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>subparts : Symbol(subparts)
>part.subparts : Symbol(subparts)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>subparts : Symbol(subparts)

    part.subparts[0].id = part.subparts[0].id;  // Error
>part.subparts[0].id : Symbol(id)
>part.subparts : Symbol(subparts)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>subparts : Symbol(subparts)
>id : Symbol(id)
>part.subparts[0].id : Symbol(id)
>part.subparts : Symbol(subparts)
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
>subparts : Symbol(subparts)
>id : Symbol(id)

    part.updatePart("hello");  // Error
>part : Symbol(part, Decl(conditionalTypes1.ts, 123, 13))
}

type ZeroOf<T extends number | string | boolean> = T extends number ? 0 : T extends string ? "" : false;
>ZeroOf : Symbol(ZeroOf, Decl(conditionalTypes1.ts, 130, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 132, 12))
>T : Symbol(T, Decl(conditionalTypes1.ts, 132, 12))
>T : Symbol(T, Decl(conditionalTypes1.ts, 132, 12))

function zeroOf<T extends number | string | boolean>(value: T) {
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))
>T : Symbol(T, Decl(conditionalTypes1.ts, 134, 16))
>value : Symbol(value, Decl(conditionalTypes1.ts, 134, 53))
>T : Symbol(T, Decl(conditionalTypes1.ts, 134, 16))

    return <ZeroOf<T>>(typeof value === "number" ? 0 : typeof value === "string" ? "" : false);
>ZeroOf : Symbol(ZeroOf, Decl(conditionalTypes1.ts, 130, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 134, 16))
>value : Symbol(value, Decl(conditionalTypes1.ts, 134, 53))
>value : Symbol(value, Decl(conditionalTypes1.ts, 134, 53))
}

function f20<T extends string>(n: number, b: boolean, x: number | boolean, y: T) {
>f20 : Symbol(f20, Decl(conditionalTypes1.ts, 136, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 138, 13))
>n : Symbol(n, Decl(conditionalTypes1.ts, 138, 31))
>b : Symbol(b, Decl(conditionalTypes1.ts, 138, 41))
>x : Symbol(x, Decl(conditionalTypes1.ts, 138, 53))
>y : Symbol(y, Decl(conditionalTypes1.ts, 138, 74))
>T : Symbol(T, Decl(conditionalTypes1.ts, 138, 13))

    zeroOf(5);  // 0
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))

    zeroOf("hello");  // ""
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))

    zeroOf(true);  // false
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))

    zeroOf(n);  // 0
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))
>n : Symbol(n, Decl(conditionalTypes1.ts, 138, 31))

    zeroOf(b);  // False
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))
>b : Symbol(b, Decl(conditionalTypes1.ts, 138, 41))

    zeroOf(x);  // 0 | false
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))
>x : Symbol(x, Decl(conditionalTypes1.ts, 138, 53))

    zeroOf(y);  // ZeroOf<T>
>zeroOf : Symbol(zeroOf, Decl(conditionalTypes1.ts, 132, 104))
>y : Symbol(y, Decl(conditionalTypes1.ts, 138, 74))
}

function f21<T extends number | string>(x: T, y: ZeroOf<T>) {
>f21 : Symbol(f21, Decl(conditionalTypes1.ts, 146, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 148, 13))
>x : Symbol(x, Decl(conditionalTypes1.ts, 148, 40))
>T : Symbol(T, Decl(conditionalTypes1.ts, 148, 13))
>y : Symbol(y, Decl(conditionalTypes1.ts, 148, 45))
>ZeroOf : Symbol(ZeroOf, Decl(conditionalTypes1.ts, 130, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 148, 13))

    let z1: number | string = y;
>z1 : Symbol(z1, Decl(conditionalTypes1.ts, 149, 7))
>y : Symbol(y, Decl(conditionalTypes1.ts, 148, 45))

    let z2: 0 | "" = y;
>z2 : Symbol(z2, Decl(conditionalTypes1.ts, 150, 7))
>y : Symbol(y, Decl(conditionalTypes1.ts, 148, 45))

    x = y;  // Error
>x : Symbol(x, Decl(conditionalTypes1.ts, 148, 40))
>y : Symbol(y, Decl(conditionalTypes1.ts, 148, 45))

    y = x;  // Error
>y : Symbol(y, Decl(conditionalTypes1.ts, 148, 45))
>x : Symbol(x, Decl(conditionalTypes1.ts, 148, 40))
}

type Extends<T, U> = T extends U ? true : false;
>Extends : Symbol(Extends, Decl(conditionalTypes1.ts, 153, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 155, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 155, 15))
>T : Symbol(T, Decl(conditionalTypes1.ts, 155, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 155, 15))

type If<C extends boolean, T, F> = C extends true ? T : F;
>If : Symbol(If, Decl(conditionalTypes1.ts, 155, 48))
>C : Symbol(C, Decl(conditionalTypes1.ts, 156, 8))
>T : Symbol(T, Decl(conditionalTypes1.ts, 156, 26))
>F : Symbol(F, Decl(conditionalTypes1.ts, 156, 29))
>C : Symbol(C, Decl(conditionalTypes1.ts, 156, 8))
>T : Symbol(T, Decl(conditionalTypes1.ts, 156, 26))
>F : Symbol(F, Decl(conditionalTypes1.ts, 156, 29))

type Not<C extends boolean> = If<C, false, true>;
>Not : Symbol(Not, Decl(conditionalTypes1.ts, 156, 58))
>C : Symbol(C, Decl(conditionalTypes1.ts, 157, 9))
>If : Symbol(If, Decl(conditionalTypes1.ts, 155, 48))
>C : Symbol(C, Decl(conditionalTypes1.ts, 157, 9))

type And<A extends boolean, B extends boolean> = If<A, B, false>;
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))
>A : Symbol(A, Decl(conditionalTypes1.ts, 158, 9))
>B : Symbol(B, Decl(conditionalTypes1.ts, 158, 27))
>If : Symbol(If, Decl(conditionalTypes1.ts, 155, 48))
>A : Symbol(A, Decl(conditionalTypes1.ts, 158, 9))
>B : Symbol(B, Decl(conditionalTypes1.ts, 158, 27))

type Or<A extends boolean, B extends boolean> = If<A, true, B>;
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))
>A : Symbol(A, Decl(conditionalTypes1.ts, 159, 8))
>B : Symbol(B, Decl(conditionalTypes1.ts, 159, 26))
>If : Symbol(If, Decl(conditionalTypes1.ts, 155, 48))
>A : Symbol(A, Decl(conditionalTypes1.ts, 159, 8))
>B : Symbol(B, Decl(conditionalTypes1.ts, 159, 26))

type IsString<T> = Extends<T, string>;
>IsString : Symbol(IsString, Decl(conditionalTypes1.ts, 159, 63))
>T : Symbol(T, Decl(conditionalTypes1.ts, 161, 14))
>Extends : Symbol(Extends, Decl(conditionalTypes1.ts, 153, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 161, 14))

type Q1 = IsString<number>;  // false
>Q1 : Symbol(Q1, Decl(conditionalTypes1.ts, 161, 38))
>IsString : Symbol(IsString, Decl(conditionalTypes1.ts, 159, 63))

type Q2 = IsString<"abc">;  // true
>Q2 : Symbol(Q2, Decl(conditionalTypes1.ts, 163, 27))
>IsString : Symbol(IsString, Decl(conditionalTypes1.ts, 159, 63))

type Q3 = IsString<any>;  // boolean
>Q3 : Symbol(Q3, Decl(conditionalTypes1.ts, 164, 26))
>IsString : Symbol(IsString, Decl(conditionalTypes1.ts, 159, 63))

type Q4 = IsString<never>;  // boolean
>Q4 : Symbol(Q4, Decl(conditionalTypes1.ts, 165, 24))
>IsString : Symbol(IsString, Decl(conditionalTypes1.ts, 159, 63))

type N1 = Not<false>;  // true
>N1 : Symbol(N1, Decl(conditionalTypes1.ts, 166, 26))
>Not : Symbol(Not, Decl(conditionalTypes1.ts, 156, 58))

type N2 = Not<true>;  // false
>N2 : Symbol(N2, Decl(conditionalTypes1.ts, 168, 21))
>Not : Symbol(Not, Decl(conditionalTypes1.ts, 156, 58))

type N3 = Not<boolean>;  // boolean
>N3 : Symbol(N3, Decl(conditionalTypes1.ts, 169, 20))
>Not : Symbol(Not, Decl(conditionalTypes1.ts, 156, 58))

type A1 = And<false, false>;  // false
>A1 : Symbol(A1, Decl(conditionalTypes1.ts, 170, 23))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A2 = And<false, true>;  // false
>A2 : Symbol(A2, Decl(conditionalTypes1.ts, 172, 28))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A3 = And<true, false>;  // false
>A3 : Symbol(A3, Decl(conditionalTypes1.ts, 173, 27))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A4 = And<true, true>;  // true
>A4 : Symbol(A4, Decl(conditionalTypes1.ts, 174, 27))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A5 = And<boolean, false>;  // false
>A5 : Symbol(A5, Decl(conditionalTypes1.ts, 175, 26))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A6 = And<false, boolean>;  // false
>A6 : Symbol(A6, Decl(conditionalTypes1.ts, 176, 30))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A7 = And<boolean, true>;  // boolean
>A7 : Symbol(A7, Decl(conditionalTypes1.ts, 177, 30))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A8 = And<true, boolean>;  // boolean
>A8 : Symbol(A8, Decl(conditionalTypes1.ts, 178, 29))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type A9 = And<boolean, boolean>;  // boolean
>A9 : Symbol(A9, Decl(conditionalTypes1.ts, 179, 29))
>And : Symbol(And, Decl(conditionalTypes1.ts, 157, 49))

type O1 = Or<false, false>;  // false
>O1 : Symbol(O1, Decl(conditionalTypes1.ts, 180, 32))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O2 = Or<false, true>;  // true
>O2 : Symbol(O2, Decl(conditionalTypes1.ts, 182, 27))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O3 = Or<true, false>;  // true
>O3 : Symbol(O3, Decl(conditionalTypes1.ts, 183, 26))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O4 = Or<true, true>;  // true
>O4 : Symbol(O4, Decl(conditionalTypes1.ts, 184, 26))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O5 = Or<boolean, false>;  // boolean
>O5 : Symbol(O5, Decl(conditionalTypes1.ts, 185, 25))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O6 = Or<false, boolean>;  // boolean
>O6 : Symbol(O6, Decl(conditionalTypes1.ts, 186, 29))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O7 = Or<boolean, true>;  // true
>O7 : Symbol(O7, Decl(conditionalTypes1.ts, 187, 29))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O8 = Or<true, boolean>;  // true
>O8 : Symbol(O8, Decl(conditionalTypes1.ts, 188, 28))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type O9 = Or<boolean, boolean>;  // boolean
>O9 : Symbol(O9, Decl(conditionalTypes1.ts, 189, 28))
>Or : Symbol(Or, Decl(conditionalTypes1.ts, 158, 65))

type T40 = never extends never ? true : false;  // true
>T40 : Symbol(T40, Decl(conditionalTypes1.ts, 190, 31))

type T41 = number extends never ? true : false;  // false
>T41 : Symbol(T41, Decl(conditionalTypes1.ts, 192, 46))

type T42 = never extends number ? true : false;  // boolean
>T42 : Symbol(T42, Decl(conditionalTypes1.ts, 193, 47))

type IsNever<T> = T extends never ? true : false;
>IsNever : Symbol(IsNever, Decl(conditionalTypes1.ts, 194, 47))
>T : Symbol(T, Decl(conditionalTypes1.ts, 196, 13))
>T : Symbol(T, Decl(conditionalTypes1.ts, 196, 13))

type T50 = IsNever<never>;  // true
>T50 : Symbol(T50, Decl(conditionalTypes1.ts, 196, 49))
>IsNever : Symbol(IsNever, Decl(conditionalTypes1.ts, 194, 47))

type T51 = IsNever<number>;  // false
>T51 : Symbol(T51, Decl(conditionalTypes1.ts, 198, 26))
>IsNever : Symbol(IsNever, Decl(conditionalTypes1.ts, 194, 47))

type T52 = IsNever<any>;  // false
>T52 : Symbol(T52, Decl(conditionalTypes1.ts, 199, 27))
>IsNever : Symbol(IsNever, Decl(conditionalTypes1.ts, 194, 47))

// Repros from #21664

type Eq<T, U> = T extends U ? U extends T ? true : false : false;
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))
>T : Symbol(T, Decl(conditionalTypes1.ts, 204, 8))
>U : Symbol(U, Decl(conditionalTypes1.ts, 204, 10))
>T : Symbol(T, Decl(conditionalTypes1.ts, 204, 8))
>U : Symbol(U, Decl(conditionalTypes1.ts, 204, 10))
>U : Symbol(U, Decl(conditionalTypes1.ts, 204, 10))
>T : Symbol(T, Decl(conditionalTypes1.ts, 204, 8))

type T60 = Eq<true, true>;  // true
>T60 : Symbol(T60, Decl(conditionalTypes1.ts, 204, 65))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))

type T61 = Eq<true, false>;  // false
>T61 : Symbol(T61, Decl(conditionalTypes1.ts, 205, 26))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))

type T62 = Eq<false, true>;  // false
>T62 : Symbol(T62, Decl(conditionalTypes1.ts, 206, 27))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))

type T63 = Eq<false, false>;  // true
>T63 : Symbol(T63, Decl(conditionalTypes1.ts, 207, 27))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))

type Eq1<T, U> = Eq<T, U> extends false ? false : true;
>Eq1 : Symbol(Eq1, Decl(conditionalTypes1.ts, 208, 28))
>T : Symbol(T, Decl(conditionalTypes1.ts, 210, 9))
>U : Symbol(U, Decl(conditionalTypes1.ts, 210, 11))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))
>T : Symbol(T, Decl(conditionalTypes1.ts, 210, 9))
>U : Symbol(U, Decl(conditionalTypes1.ts, 210, 11))

type T70 = Eq1<true, true>;  // true
>T70 : Symbol(T70, Decl(conditionalTypes1.ts, 210, 55))
>Eq1 : Symbol(Eq1, Decl(conditionalTypes1.ts, 208, 28))

type T71 = Eq1<true, false>;  // false
>T71 : Symbol(T71, Decl(conditionalTypes1.ts, 211, 27))
>Eq1 : Symbol(Eq1, Decl(conditionalTypes1.ts, 208, 28))

type T72 = Eq1<false, true>;  // false
>T72 : Symbol(T72, Decl(conditionalTypes1.ts, 212, 28))
>Eq1 : Symbol(Eq1, Decl(conditionalTypes1.ts, 208, 28))

type T73 = Eq1<false, false>;  // true
>T73 : Symbol(T73, Decl(conditionalTypes1.ts, 213, 28))
>Eq1 : Symbol(Eq1, Decl(conditionalTypes1.ts, 208, 28))

type Eq2<T, U> = Eq<T, U> extends true ? true : false;
>Eq2 : Symbol(Eq2, Decl(conditionalTypes1.ts, 214, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 216, 9))
>U : Symbol(U, Decl(conditionalTypes1.ts, 216, 11))
>Eq : Symbol(Eq, Decl(conditionalTypes1.ts, 200, 24))
>T : Symbol(T, Decl(conditionalTypes1.ts, 216, 9))
>U : Symbol(U, Decl(conditionalTypes1.ts, 216, 11))

type T80 = Eq2<true, true>;  // true
>T80 : Symbol(T80, Decl(conditionalTypes1.ts, 216, 54))
>Eq2 : Symbol(Eq2, Decl(conditionalTypes1.ts, 214, 29))

type T81 = Eq2<true, false>;  // false
>T81 : Symbol(T81, Decl(conditionalTypes1.ts, 217, 27))
>Eq2 : Symbol(Eq2, Decl(conditionalTypes1.ts, 214, 29))

type T82 = Eq2<false, true>;  // false
>T82 : Symbol(T82, Decl(conditionalTypes1.ts, 218, 28))
>Eq2 : Symbol(Eq2, Decl(conditionalTypes1.ts, 214, 29))

type T83 = Eq2<false, false>;  // true
>T83 : Symbol(T83, Decl(conditionalTypes1.ts, 219, 28))
>Eq2 : Symbol(Eq2, Decl(conditionalTypes1.ts, 214, 29))

// Repro from #21756

type Foo<T> = T extends string ? boolean : number;
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 224, 9))
>T : Symbol(T, Decl(conditionalTypes1.ts, 224, 9))

type Bar<T> = T extends string ? boolean : number;
>Bar : Symbol(Bar, Decl(conditionalTypes1.ts, 224, 50))
>T : Symbol(T, Decl(conditionalTypes1.ts, 225, 9))
>T : Symbol(T, Decl(conditionalTypes1.ts, 225, 9))

const convert = <U>(value: Foo<U>): Bar<U> => value;
>convert : Symbol(convert, Decl(conditionalTypes1.ts, 226, 5))
>U : Symbol(U, Decl(conditionalTypes1.ts, 226, 17))
>value : Symbol(value, Decl(conditionalTypes1.ts, 226, 20))
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>U : Symbol(U, Decl(conditionalTypes1.ts, 226, 17))
>Bar : Symbol(Bar, Decl(conditionalTypes1.ts, 224, 50))
>U : Symbol(U, Decl(conditionalTypes1.ts, 226, 17))
>value : Symbol(value, Decl(conditionalTypes1.ts, 226, 20))

type Baz<T> = Foo<T>;
>Baz : Symbol(Baz, Decl(conditionalTypes1.ts, 226, 52))
>T : Symbol(T, Decl(conditionalTypes1.ts, 228, 9))
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 228, 9))

const convert2 = <T>(value: Foo<T>): Baz<T> => value;
>convert2 : Symbol(convert2, Decl(conditionalTypes1.ts, 229, 5))
>T : Symbol(T, Decl(conditionalTypes1.ts, 229, 18))
>value : Symbol(value, Decl(conditionalTypes1.ts, 229, 21))
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 229, 18))
>Baz : Symbol(Baz, Decl(conditionalTypes1.ts, 226, 52))
>T : Symbol(T, Decl(conditionalTypes1.ts, 229, 18))
>value : Symbol(value, Decl(conditionalTypes1.ts, 229, 21))

function f31<T>() {
>f31 : Symbol(f31, Decl(conditionalTypes1.ts, 229, 53))
>T : Symbol(T, Decl(conditionalTypes1.ts, 231, 13))

    type T1 = T extends string ? boolean : number;
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 231, 19))
>T : Symbol(T, Decl(conditionalTypes1.ts, 231, 13))

    type T2 = T extends string ? boolean : number;
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 232, 50))
>T : Symbol(T, Decl(conditionalTypes1.ts, 231, 13))

    var x: T1;
>x : Symbol(x, Decl(conditionalTypes1.ts, 234, 7), Decl(conditionalTypes1.ts, 235, 7))
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 231, 19))

    var x: T2;
>x : Symbol(x, Decl(conditionalTypes1.ts, 234, 7), Decl(conditionalTypes1.ts, 235, 7))
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 232, 50))
}

function f32<T, U>() {
>f32 : Symbol(f32, Decl(conditionalTypes1.ts, 236, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 238, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 238, 15))

    type T1 = T & U extends string ? boolean : number;
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 238, 22))
>T : Symbol(T, Decl(conditionalTypes1.ts, 238, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 238, 15))

    type T2 = Foo<T & U>;
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 239, 54))
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 238, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 238, 15))

    var z: T1;
>z : Symbol(z, Decl(conditionalTypes1.ts, 241, 7), Decl(conditionalTypes1.ts, 242, 7))
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 238, 22))

    var z: T2;  // Error, T2 is distributive, T1 isn't
>z : Symbol(z, Decl(conditionalTypes1.ts, 241, 7), Decl(conditionalTypes1.ts, 242, 7))
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 239, 54))
}

function f33<T, U>() {
>f33 : Symbol(f33, Decl(conditionalTypes1.ts, 243, 1))
>T : Symbol(T, Decl(conditionalTypes1.ts, 245, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 245, 15))

    type T1 = Foo<T & U>;
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 245, 22))
>Foo : Symbol(Foo, Decl(conditionalTypes1.ts, 220, 29))
>T : Symbol(T, Decl(conditionalTypes1.ts, 245, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 245, 15))

    type T2 = Bar<T & U>;
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 246, 25))
>Bar : Symbol(Bar, Decl(conditionalTypes1.ts, 224, 50))
>T : Symbol(T, Decl(conditionalTypes1.ts, 245, 13))
>U : Symbol(U, Decl(conditionalTypes1.ts, 245, 15))

    var z: T1;
>z : Symbol(z, Decl(conditionalTypes1.ts, 248, 7), Decl(conditionalTypes1.ts, 249, 7))
>T1 : Symbol(T1, Decl(conditionalTypes1.ts, 245, 22))

    var z: T2;
>z : Symbol(z, Decl(conditionalTypes1.ts, 248, 7), Decl(conditionalTypes1.ts, 249, 7))
>T2 : Symbol(T2, Decl(conditionalTypes1.ts, 246, 25))
}

