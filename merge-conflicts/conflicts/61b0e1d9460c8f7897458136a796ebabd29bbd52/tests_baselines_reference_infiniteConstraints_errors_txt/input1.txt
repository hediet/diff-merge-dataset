error TS2321: Excessive stack depth comparing types 'Extract<T[Exclude<keyof T, string | number | symbol>], Record<"val", string>>["val"]' and 'Extract<T[Exclude<keyof T, Exclude<keyof T, string | number | symbol>>], Record<"val", string>>["val"]'.
tests/cases/compiler/infiniteConstraints.ts(4,37): error TS2536: Type '"val"' cannot be used to index type 'B[Exclude<keyof B, K>]'.
tests/cases/compiler/infiniteConstraints.ts(27,36): error TS2345: Argument of type '{ main: Record<"val", "test">; alternate: Record<"val", "test2">; }' is not assignable to parameter of type '{ main: never; alternate: never; }'.
  Types of property 'main' are incompatible.
    Type 'Record<"val", "test">' is not assignable to type 'never'.
tests/cases/compiler/infiniteConstraints.ts(29,44): error TS2345: Argument of type '{ main: Record<"val", "test">; }' is not assignable to parameter of type '{ main: never; }'.
  Types of property 'main' are incompatible.
    Type 'Record<"val", "test">' is not assignable to type 'never'.
tests/cases/compiler/infiniteConstraints.ts(31,42): error TS2345: Argument of type '{ main: Record<"val", "dup">; alternate: Record<"val", "dup">; }' is not assignable to parameter of type '{ main: never; alternate: never; }'.
  Types of property 'main' are incompatible.
    Type 'Record<"val", "dup">' is not assignable to type 'never'.
tests/cases/compiler/infiniteConstraints.ts(36,71): error TS2536: Type '"foo"' cannot be used to index type 'T[keyof T]'.


!!! error TS2321: Excessive stack depth comparing types 'Extract<T[Exclude<keyof T, string | number | symbol>], Record<"val", string>>["val"]' and 'Extract<T[Exclude<keyof T, Exclude<keyof T, string | number | symbol>>], Record<"val", string>>["val"]'.
==== tests/cases/compiler/infiniteConstraints.ts (5 errors) ====
    // Both of the following types trigger the recursion limiter in getImmediateBaseConstraint
    
    type T1<B extends { [K in keyof B]: Extract<B[Exclude<keyof B, K>], { val: string }>["val"] }> = B;
    type T2<B extends { [K in keyof B]: B[Exclude<keyof B, K>]["val"] }> = B;
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2536: Type '"val"' cannot be used to index type 'B[Exclude<keyof B, K>]'.
    
    // Repros from #22950
    
    type AProp<T extends { a: string }> = T
    
    declare function myBug<
      T extends { [K in keyof T]: T[K] extends AProp<infer U> ? U : never }
    >(arg: T): T
    
    const out = myBug({obj1: {a: "test"}})
    
    type Value<V extends string = string> = Record<"val", V>;
    declare function value<V extends string>(val: V): Value<V>;
    
    declare function ensureNoDuplicates<
      T extends {
        [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"]
          ? never
          : any
      }
    >(vals: T): void;
    
    const noError = ensureNoDuplicates({main: value("test"), alternate: value("test2")});
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ main: Record<"val", "test">; alternate: Record<"val", "test2">; }' is not assignable to parameter of type '{ main: never; alternate: never; }'.
!!! error TS2345:   Types of property 'main' are incompatible.
!!! error TS2345:     Type 'Record<"val", "test">' is not assignable to type 'never'.
    
    const shouldBeNoError = ensureNoDuplicates({main: value("test")});
                                               ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ main: Record<"val", "test">; }' is not assignable to parameter of type '{ main: never; }'.
!!! error TS2345:   Types of property 'main' are incompatible.
!!! error TS2345:     Type 'Record<"val", "test">' is not assignable to type 'never'.
    
    const shouldBeError = ensureNoDuplicates({main: value("dup"), alternate: value("dup")});
                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ main: Record<"val", "dup">; alternate: Record<"val", "dup">; }' is not assignable to parameter of type '{ main: never; alternate: never; }'.
!!! error TS2345:   Types of property 'main' are incompatible.
!!! error TS2345:     Type 'Record<"val", "dup">' is not assignable to type 'never'.
    
    // Repro from #26448
    
    type Cond<T> = T extends number ? number : never;
    declare function function1<T extends {[K in keyof T]: Cond<T[K]>}>(): T[keyof T]["foo"];
                                                                          ~~~~~~~~~~~~~~~~~
!!! error TS2536: Type '"foo"' cannot be used to index type 'T[keyof T]'.
    