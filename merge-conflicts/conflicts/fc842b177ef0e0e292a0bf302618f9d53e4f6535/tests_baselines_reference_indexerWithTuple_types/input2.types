=== tests/cases/conformance/types/tuple/indexerWithTuple.ts ===
var strNumTuple: [string, number] = ["foo", 10]; 
>strNumTuple : [string, number]
>["foo", 10] : [string, number]

var numTupleTuple: [number, [string, number]] = [10, ["bar", 20]];
>numTupleTuple : [number, [string, number]]
>[10, ["bar", 20]] : [number, [string, number]]
>["bar", 20] : [string, number]

// no error
var idx0 = 0;
>idx0 : number

var idx1 = 1;
>idx1 : number

var ele10 = strNumTuple[0]; // string
>ele10 : string
>strNumTuple[0] : string
>strNumTuple : [string, number]

var ele11 = strNumTuple[1]; // number
>ele11 : number
>strNumTuple[1] : number
>strNumTuple : [string, number]

var ele12 = strNumTuple[2]; // {}
>ele12 : {}
>strNumTuple[2] : {}
>strNumTuple : [string, number]

var ele13 = strNumTuple[idx0]; // {}
>ele13 : {}
>strNumTuple[idx0] : {}
>strNumTuple : [string, number]
>idx0 : number

var ele14 = strNumTuple[idx1]; // {}
>ele14 : {}
>strNumTuple[idx1] : {}
>strNumTuple : [string, number]
>idx1 : number

var ele15 = strNumTuple["0"]; // string
>ele15 : string
>strNumTuple["0"] : string
>strNumTuple : [string, number]

var ele16 = strNumTuple["1"]; // number
>ele16 : number
>strNumTuple["1"] : number
>strNumTuple : [string, number]

var strNumTuple1 = numTupleTuple[1];  //[string, number];
>strNumTuple1 : [string, number]
>numTupleTuple[1] : [string, number]
>numTupleTuple : [number, [string, number]]

var ele17 = numTupleTuple[2]; // {}
>ele17 : {}
>numTupleTuple[2] : {}
>numTupleTuple : [number, [string, number]]

